Which among the following data structures is best suited for storing very large 
numbers (numbers that cannot be stored in long long int). 
Following are the operations needed for these large numbers.
(A) Array
(B) Linked List
(C) Binary Tree
(D) Hash


Answer: (B)

Explanation: The only two choices that make sense are Array and Linked List. 
Since array sizes are limited, they can create problems for following operations.

X = X*Y where X and Y are very large numbers.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Que – 1. For 8 keys and 6 slots in a hashing table with uniform hashing and chaining, 
what is the expected number of items that hash to a particular location. 
(A) 2.33 
(B) 0.75 
(C) 1.33 
(D) 2 

Solution: 
Probability that key1 ends up in slot 1 = 1/6 
Probability that key2 ends up in slot 1 = 1/6 
Probability that key3 ends up in slot x = 1/6 
Probability that key4 ends up in slot x = 1/6 
Probability that key5 ends up in slot x = 1/6 
Probability that key6 ends up in slot x = 1/6 
Expected number of items that hash to a particular location = 8/6 
Option (C) is correct. 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Que – 2. For n keys and m slots in a hashing table, 
which of the following is the expected number of empty location. 
(A) n((m-1)/m)^n 
(B) m((m-1)/m)^n 
(C) n((n-1)/m)^n 
(D) n((n-1)/n)^m 

Solution: 
Expected number of items that hash to a particular location = n/m 
Probability that slot 1 is empty after n keys are inserted = ((m-1)/m)^n 
Probability that slot 2 is empty after n keys are inserted = ((m-1)/m)^n 
Probability that slot 3 is empty after n keys are inserted = ((m-1)/m)^n 
So for m slots expected number of empty locations = m((m-1)/m)^n 
Option (B) is correct. 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q. What is the data structures used to perform recursion?

A. Stack. Because of its LIFO (Last In First Out) property it remembers 
its ‘caller’ so knows whom to return when the function has to return. 
Recursion makes use of system stack for 
storing the return addresses of the function calls.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------------------------------------------------------